From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: hopeless-ponderer <hopelessponderer1123@gmail.com>
Date: Thu, 24 Jun 2021 00:17:12 -0700
Subject: [PATCH] renamed
 simulation/ai/common-api/map-module.js:mapPosToGamePos to mapIndexToGamePos

created API3.warnf for AI

simulation/ai/delphi/headquarters.js:findCivicLocation now restricts buildings to land indices already occupied by a civil center
---
 .../simulation/ai/common-api/map-module.js      |  4 ++--
 .../public/simulation/ai/common-api/utils.js    |  5 +++++
 .../public/simulation/ai/delphi/headquarters.js | 17 +++++++++++++----
 3 files changed, 20 insertions(+), 6 deletions(-)

diff --git a/binaries/data/mods/public/simulation/ai/common-api/map-module.js b/binaries/data/mods/public/simulation/ai/common-api/map-module.js
index f09011e23d..07ef3787be 100644
--- a/binaries/data/mods/public/simulation/ai/common-api/map-module.js
+++ b/binaries/data/mods/public/simulation/ai/common-api/map-module.js
@@ -44,12 +44,12 @@ m.Map.prototype.gamePosToMapPos = function(p)
 	return [Math.floor(p[0]/this.cellSize), Math.floor(p[1]/this.cellSize)];
 };
 
-m.Map.prototype.mapPosToGamePos = function(index)
+m.Map.prototype.mapIndexToGamePos = function(index)
 {
 	let posX = (index % this.width) * this.cellSize;
 	let posZ = Math.floor(index / this.width) * this.cellSize;
 	return [posX, posZ];
-};// end function m.Map.prototype.mapPosToGamePos
+};// end function m.Map.prototype.mapIndexToGamePos
 
 m.Map.prototype.point = function(p)
 {
diff --git a/binaries/data/mods/public/simulation/ai/common-api/utils.js b/binaries/data/mods/public/simulation/ai/common-api/utils.js
index 021c7deae7..fc27a7b5f1 100644
--- a/binaries/data/mods/public/simulation/ai/common-api/utils.js
+++ b/binaries/data/mods/public/simulation/ai/common-api/utils.js
@@ -9,6 +9,11 @@ m.warn = function(output)
 		warn("PlayerID " + PlayerID + " |   " + uneval(output));
 };
 
+m.warnf = function(fmt, ...args)
+{
+	m.warn(sprintf(fmt, ...args));
+};
+
 /**
  * Useful for simulating consecutive AI matches.
  */
diff --git a/binaries/data/mods/public/simulation/ai/delphi/headquarters.js b/binaries/data/mods/public/simulation/ai/delphi/headquarters.js
index 9c22abb4ee..a436aa94e8 100644
--- a/binaries/data/mods/public/simulation/ai/delphi/headquarters.js
+++ b/binaries/data/mods/public/simulation/ai/delphi/headquarters.js
@@ -1003,7 +1003,7 @@ DELPHI.HQ.prototype.findGenericCCLocation = function(gameState, template)
 	}// end for res of Resources.GetCodes()
 	// favor shorelines
 	for (let tile of this.shoreTiles) {
-		let pos = gameState.ai.accessibility.mapPosToGamePos(tile.index);
+		let pos = gameState.ai.accessibility.mapIndexToGamePos(tile.index);
 		let tilePosX = Math.floor(pos[0] / cellSize);
 		let tilePosZ = Math.floor(pos[1] / cellSize);
 		placement.addInfluence(tilePosX, tilePosZ, structRadius, Math.ceil((tile.waterValue * shoreCoeff) / cellSize));
@@ -1087,7 +1087,7 @@ DELPHI.HQ.prototype.findGenericCCLocation = function(gameState, template)
 			this.navalManager.setMinimalTransportShips(gameState, sea, 1);
 	}
 
-	return gameState.ai.accessibility.mapPosToGamePos(bestTile.idx);
+	return gameState.ai.accessibility.mapIndexToGamePos(bestTile.idx);
 };// end function DELPHI.HQ.prototype.findGenericCCLocation
 
 /**
@@ -1640,7 +1640,8 @@ DELPHI.HQ.prototype.checkDockPlacement = function(gameState, x, z, halfDepth, ha
 DELPHI.HQ.prototype.findCivicLocation = function(gameState, template)
 {
 	let placement = new API3.Map(gameState.sharedScript, "territory");
-	const isDock = template.buildPlacementType() == 'shore';
+	let obstructions = DELPHI.createObstructionMap(gameState, 0, template);
+	const isDock = template.buildPlacementType() === 'shore';
 	const civCentreRadiusRatio = 1.0;
 	const obstructionRatio = isDock ? 0.6 : 1.2;
 	const maxRetries = 100;// for finding dock position
@@ -1664,6 +1665,15 @@ DELPHI.HQ.prototype.findCivicLocation = function(gameState, template)
 	// distance from similar structures; try to spread out amongst civ centres
 	this.applyBuildRestrictions(placement, gameState, template);
 	let civCentres = gameState.getOwnEntitiesByClass('CivCentre', true).toEntityArray();
+	const validLandIndices = new Set(civCentres.map((cc) => DELPHI.getLandAccess(gameState, cc)));
+	// ensure a location on a non-valid land index is not chosen
+	for (let i in placement.map)
+	{
+		if (!placement.map[i])
+			continue;
+		let landIndex = gameState.ai.accessibility.getAccessValue(placement.mapIndexToGamePos(i));
+		placement.map[i] = validLandIndices.has(landIndex) ? placement.map[i] : 0;
+	}
 	if (civCentres.length < 1)
 		return false;
 	for (let civCentre of civCentres)
@@ -1678,7 +1688,6 @@ DELPHI.HQ.prototype.findCivicLocation = function(gameState, template)
 			continue;
 		placement.multiplyInfluence(civCentrePosX, civCentrePosZ, Math.floor((civCentreRadius * civCentreRadiusRatio) / cellSize), 2, 'linear');
 	}// end for civCentre
-	let obstructions = DELPHI.createObstructionMap(gameState, 0, template);
 	const radius = Math.ceil((template.obstructionRadius().max * obstructionRatio / obstructions.cellSize));
 	let validPositions = [];
 	for (let i = 0; i < maxRetries; i++)
-- 
2.25.1

