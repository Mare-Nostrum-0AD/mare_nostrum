From 1b0f58c365ad569cae35481c983c29178a073d15 Mon Sep 17 00:00:00 2001
From: hopeless-ponderer <hopelessponderer1123@gmail.com>
Date: Wed, 26 May 2021 16:18:16 -0700
Subject: [PATCH] population growth rate (with CityMember modifiers) now shown
 in the entity selection gui (in portrait caption) and in detailed tooltips

---
 binaries/data/mods/public/TODO.md             |   3 +
 .../data/mods/public/gui/common/tooltips.js   |  23 +-
 .../mods/public/gui/session/PanelEntity.js    |   3 +-
 .../public/gui/session/selection_details.js   |  40 +-
 .../single_details_area.xml                   |   8 +
 .../data/mods/public/gui/session/styles.xml   |  16 +
 .../mods/public/simulation/components/City.js | 343 ++++++++++--------
 .../simulation/components/GarrisonHolder.js   |  16 +-
 .../simulation/components/GuiInterface.js     |  10 +-
 .../simulation/components/schemas/City.xsd    | 102 +++---
 10 files changed, 352 insertions(+), 212 deletions(-)

diff --git a/binaries/data/mods/public/TODO.md b/binaries/data/mods/public/TODO.md
index 811f928298..0ea560cde0 100644
--- a/binaries/data/mods/public/TODO.md
+++ b/binaries/data/mods/public/TODO.md
@@ -27,6 +27,9 @@ Please feel free to contribute if you see anything you can do here. If there is
 - Create gold, silver resource supplies
 	- icons as well
 - Create milk resource icon
+- Implement value modifiers for City, scaling by population (see GarrisonHolder for example)
+- Implement DeficitTriggers, DeficitValueModifiers for Upkeep (see GarrisonHolder for example)
+	- Should replace/augment HandleInsufficientUpkeep
 - Implement directional resistance, allowing weaker flank and rear armor
 - Rename "Population Limit" to "Command Limit", change icon
 - Rebalance city manpower trickle
diff --git a/binaries/data/mods/public/gui/common/tooltips.js b/binaries/data/mods/public/gui/common/tooltips.js
index 0c5aa4e653..f026c3d8f3 100644
--- a/binaries/data/mods/public/gui/common/tooltips.js
+++ b/binaries/data/mods/public/gui/common/tooltips.js
@@ -1201,7 +1201,7 @@ function getResourceDropsiteTooltip(template)
 
 function getCityPopulationText(template)
 {
-	if (!template || !template.city || !template.population)
+	if (!template || !template.city || !template.city.population)
 		return "";
 
 	let tooltip = sprintf("Initial: %(init)s, Maximum: %(max)s, Growth Rate: %(amount)s / %(interval)s", {
@@ -1218,6 +1218,27 @@ function getCityPopulationText(template)
 	}));
 }
 
+function getCityPopulationTooltip(entState)
+{
+	if (!entState || !entState.city || !entState.city.population || !entState.city.growth)
+		return "";
+
+	let netGrowthAmount = entState.city.growth.amount - entState.city.growth.decayAmount;
+	let tooltip = sprintf(["Population: %(pop)s", "Maximum: %(max)s", "Growth Rate: %(direction)s%(amount)s/%(interval)s"].join("\n" + g_Indent), {
+		"pop": entState.city.population.toLocaleString(),
+		"max": entState.city.maxPopulation.toLocaleString(),
+		"direction": netGrowthAmount < 0 ? '' : '+',
+		"amount": netGrowthAmount.toLocaleString(),
+		"interval": getSecondsString(entState.city.growth.interval / 1000)
+	});
+	if (entState.city.growth.tradeRate)
+		tooltip += sprintf(" + %(rate)s per unit trade income", { "rate": entState.city.growth.tradeRate });
+	return translate(sprintf("%(label)s\n%(text)s", {
+		"label": headerFont("City:"),
+		"text": g_Indent + tooltip
+	}));
+}
+
 function getCityUpgradeText(template, playerCiv)
 {
 	if (!template || !template.city || !template.city.upgrade)
diff --git a/binaries/data/mods/public/gui/session/PanelEntity.js b/binaries/data/mods/public/gui/session/PanelEntity.js
index f8b23dbfa5..02235edea9 100644
--- a/binaries/data/mods/public/gui/session/PanelEntity.js
+++ b/binaries/data/mods/public/gui/session/PanelEntity.js
@@ -142,5 +142,6 @@ PanelEntity.prototype.Tooltips = [
 	getAttackTooltip,
 	getResistanceTooltip,
 	getEntityTooltip,
-	getAurasTooltip
+	getAurasTooltip,
+	getCityPopulationTooltip
 ];
diff --git a/binaries/data/mods/public/gui/session/selection_details.js b/binaries/data/mods/public/gui/session/selection_details.js
index cd00b3e75c..f7dfc00ede 100644
--- a/binaries/data/mods/public/gui/session/selection_details.js
+++ b/binaries/data/mods/public/gui/session/selection_details.js
@@ -66,12 +66,45 @@ function displaySingle(entState)
 		else
 			secondaryName = sprintf(translate("Packed"));
 	}
+	// City population
 	if (entState.city && entState.city.population)
 	{
 		if (secondaryName && g_ShowSecondaryNames)
-			secondaryName = sprintf(translate("%(genName)s | Population %(pop)s"), { "genName": secondaryName, "pop": entState.city.population });
+			secondaryName = sprintf(translate("%(genName)s | Population %(pop)s"), { "genName": secondaryName, "pop": entState.city.population.toLocaleString() });
 		else
-			secondaryName = sprintf(translate("Population %(pop)s"), { "pop": entState.city.population });
+			secondaryName = sprintf(translate("Population %(pop)s"), { "pop": entState.city.population.toLocaleString() });
+	}
+	// City population growth rate
+	if (entState.city && entState.city.growth)
+	{
+		let netGrowth = entState.city.growth.amount - entState.city.growth.decayAmount;
+		let interval = entState.city.growth.interval;
+		let tradeRate = entState.city.growth.tradeRate;
+		let portraitCaption = Engine.GetGUIObjectByName(netGrowth < 0 ? "portraitCaptionNegative" : "portraitCaption");
+		let portraitCaptionAlt = Engine.GetGUIObjectByName(netGrowth < 0 ? "portraitCaption" : "portraitCaptionNegative");
+		portraitCaption.caption = sprintf(translate("%(direction)s%(amount)s/%(interval)s"), {
+			"direction": netGrowth < 0 ? '' : '+',
+			"amount": netGrowth.toLocaleString(),
+			"interval": getSecondsString(interval < 1 ? interval : Math.floor(interval / 1000))
+		});
+		portraitCaption.tooltip = sprintf(translate("Population %(direction)s%(amount)s/%(interval)s + %(tradeRate)s per unit trade income."), {
+			"direction": netGrowth < 0 ? '' : '+',
+			"amount": netGrowth.toLocaleString(),
+			"interval": getSecondsString(interval < 1 ? interval : Math.floor(interval / 1000)),
+			"tradeRate": tradeRate.toLocaleString()
+		});
+		portraitCaption.hidden = false;
+		portraitCaptionAlt.hidden = true;
+		portraitCaptionAlt.tooltip = "";
+	}
+	else
+	{
+		Engine.GetGUIObjectByName("portraitCaption").hidden = true;
+		Engine.GetGUIObjectByName("portraitCaption").caption = "";
+		Engine.GetGUIObjectByName("portraitCaption").tooltip = "";
+		Engine.GetGUIObjectByName("portraitCaptionNegative").hidden = true;
+		Engine.GetGUIObjectByName("portraitCaptionNegative").caption = "";
+		Engine.GetGUIObjectByName("portraitCaptionNegative").tooltip = "";
 	}
 	let playerState = g_Players[entState.player];
 
@@ -343,7 +376,8 @@ function displaySingle(entState)
 		getProjectilesTooltip,
 		getResourceTrickleTooltip,
 		getUpkeepTooltip,
-		getLootTooltip
+		getLootTooltip,
+		getCityPopulationTooltip
 	].map(func => func(entState)).filter(tip => tip).join("\n");
 	if (detailedTooltip)
 	{
diff --git a/binaries/data/mods/public/gui/session/selection_panels_middle/single_details_area.xml b/binaries/data/mods/public/gui/session/selection_panels_middle/single_details_area.xml
index aadbbc0804..184963ca3f 100644
--- a/binaries/data/mods/public/gui/session/selection_panels_middle/single_details_area.xml
+++ b/binaries/data/mods/public/gui/session/selection_panels_middle/single_details_area.xml
@@ -105,6 +105,14 @@
 				<translatableAttribute id="tooltip">Rank</translatableAttribute>
 			</object>
 
+			<object size="0 100%-20 100% 100%" name="portraitCaption" type="text" style="portraitCaptionText" tooltip_style="sessionToolTip">
+				<translatableAttribute id="tooltip">Population Growth Rate</translatableAttribute>
+			</object>
+
+			<object size="0 100%-20 100% 100%" name="portraitCaptionNegative" type="text" style="portraitCaptionTextNegative" tooltip_style="sessionToolTip">
+				<translatableAttribute id="tooltip">Population Growth Rate</translatableAttribute>
+			</object>
+
 			<!-- Status Effects icons -->
 			<object  name="statusEffectsIcons" size="100%-20 4 100%-4 100%">
 				<repeat count="5">
diff --git a/binaries/data/mods/public/gui/session/styles.xml b/binaries/data/mods/public/gui/session/styles.xml
index 340b0cb317..ebf4ecdb48 100644
--- a/binaries/data/mods/public/gui/session/styles.xml
+++ b/binaries/data/mods/public/gui/session/styles.xml
@@ -186,6 +186,22 @@
 		text_valign="center"
 	/>
 
+	<style name="portraitCaptionText"
+		font="sans-stroke-14"
+		textcolor="gold"
+		text_align="right"
+		text_valign="bottom"
+		ghost="true"
+	/>
+
+	<style name="portraitCaptionTextNegative"
+		font="sans-stroke-14"
+		textcolor="red"
+		text_align="right"
+		text_valign="bottom"
+		ghost="true"
+	/>
+
 	<!-- ================================  ================================ -->
 	<!-- Icon Styles -->
 	<!-- ================================  ================================ -->
diff --git a/binaries/data/mods/public/simulation/components/City.js b/binaries/data/mods/public/simulation/components/City.js
index a0c48ce66c..3ed3fcec06 100644
--- a/binaries/data/mods/public/simulation/components/City.js
+++ b/binaries/data/mods/public/simulation/components/City.js
@@ -1,113 +1,101 @@
 function City() {}
 
 // City.prototype.Schema = Components.ParseSchema('City');
-City.prototype.Schema = "<a:help>Identifies this entity as a city centre.</a:help>" +
-"<optional>" +
-	"<element name='Downgrade' a:help='Entity to downgrade to upon reaching min population.'>" +
-		"<text />" +
-	"</element>" +
-"</optional>" +
-"<optional>" +
-"<element name='Influence' a:help='Modifications to surrounding structures'>" +
-	"<zeroOrMore>" +
-		"<element a:help='One modification'>" +
-			"<anyName />" +
-			"<element name='Attribute' a:help='Attribute to modify'>" +
-				"<text />" +
-			"</element>" +
-			"<element name='List' a:help='Classes to modify'>" +
-				"<attribute name='datatype'>" +
-					"<value>tokens</value>" +
-				"</attribute>" +
-				"<text />" +
+City.prototype.Schema =
+	"<a:help>Identifies this entity as a city centre.</a:help>" +
+	"<optional>" +
+		"<element name='Downgrade' a:help='Entity to downgrade to upon reaching min population.'>" +
+			"<text />" +
+		"</element>" +
+	"</optional>" +
+	"<optional>" +
+		"<element name='Initial' a:help='Whether or not this is the initial buildable city in a progression of city types.'>" +
+			"<data type='boolean' />" +
+		"</element>" +
+	"</optional>" +
+	"<element name='Population' a:help='Population of city (does not relate to player population number)'>" +
+		"<element name='Growth' a:help='Population growth rate'>" +
+			"<element name='Amount' a:help='Amount to grow population per interval'>" +
+				"<data type='nonNegativeInteger' />" +
 			"</element>" +
-			"<element name='Modifier' a:help='Modification to make'>" +
-				"<element name='Base' a:help='Basic value of modification'>" +
-					"<ref name='decimal' />" +
-				"</element>" +
-				"<element name='PerPop' a:help='Apply bonus per X amount population'>" +
-					"<ref name='nonNegativeDecimal' />" +
-				"</element>" +
-				"<element name='Type' a:help='Add or Multiply'>" +
-					"<choice>" +
-						"<value>add</value>" +
-						"<value>multiply</value>" +
-					"</choice>" +
-				"</element>" +
-				"<element name='Value' a:help='Population bonus value'>" +
+			"<optional>" +
+				"<element name='AttackMultiplier' a:help='Modify growth rate when city attacked'>" +
+					"<!-- TODO: implement -->" +
 					"<ref name='decimal' />" +
 				"</element>" +
+			"</optional>" +
+			"<element name='DecayAmount' a:help='Amount to detract from population per interval'>" +
+				"<data type='nonNegativeInteger' />" +
+			"</element>" +
+			"<element name='Interval' a:help='Interval in milliseconds'>" +
+				"<data type='positiveInteger' />" +
+			"</element>" +
+			"<element name='TradeRate' a:help='Amount to modify population per arriving trader as percentage of trade gain.'>" +
+				"<ref name='nonNegativeDecimal' />" +
 			"</element>" +
 		"</element>" +
-	"</zeroOrMore>" +
-"</element>" +
-"</optional>" +
-"<optional>" +
-"<element name='Initial' a:help='Whether or not this is the initial buildable city in a progression of city types.'>" +
-	"<data type='boolean' />" +
-"</element>" +
-"</optional>" +
-"<element name='Population' a:help='Population of city (does not relate to player population number)'>" +
-	"<element name='Growth' a:help='Population growth rate'>" +
-		"<element name='Amount' a:help='Amount to grow population per interval'>" +
+		"<element name='Init' a:help='Initial population'>" +
 			"<data type='nonNegativeInteger' />" +
 		"</element>" +
-		"<optional>" +
-			"<element name='AttackMultiplier' a:help='Modify growth rate when city attacked'>" +
-				"<ref name='decimal' />" +
-			"</element>" +
-		"</optional>" +
-		"<element name='DecayAmount' a:help='Amount to detract from population per interval'>" +
+		"<element name='Max' a:help='Maximum population'>" +
 			"<data type='nonNegativeInteger' />" +
 		"</element>" +
-		"<element name='Interval' a:help='Interval in milliseconds'>" +
-			"<data type='positiveInteger' />" +
-		"</element>" +
-		"<element name='TradeRate' a:help='Amount to modify population per arriving trader as percentage of trade gain.'>" +
-			"<ref name='nonNegativeDecimal' />" +
+		"<element name='Min' a:help='Minimum population'>" +
+			"<data type='nonNegativeInteger' />" +
 		"</element>" +
 	"</element>" +
-	"<element name='Init' a:help='Initial population'>" +
-		"<data type='nonNegativeInteger' />" +
-	"</element>" +
-	"<element name='Max' a:help='Maximum population'>" +
-		"<data type='nonNegativeInteger' />" +
-	"</element>" +
-	"<element name='Min' a:help='Minimum population'>" +
-		"<data type='nonNegativeInteger' />" +
-	"</element>" +
-"</element>" +
-"<element name='Radius' a:help='Radius in which structures will belong to this city'>" +
-	"<ref name='nonNegativeDecimal' />" +
-"</element>" +
-"<optional>" +
-"<element name='RangeOverlay'>" +
-	"<interleave>" +
-		"<element name='LineTexture'><text/></element>" +
-		"<element name='LineTextureMask'><text/></element>" +
-		"<element name='LineThickness'><ref name='nonNegativeDecimal'/></element>" +
-	"</interleave>" +
-"</element>" +
-"</optional>" +
-"<optional>" +
-"<element name='ResourceTrickle' a:help='Resource trickle, modified by population'>" +
-	"<element name='Interval' a:help='Interval to collect resources in milliseconds'>" +
-		"<ref name='nonNegativeDecimal' />" +
-	"</element>" +
-	"<element name='PerPop' a:help='Multiply rates per X number of people'>" +
+	"<element name='Radius' a:help='Radius in which structures will belong to this city'>" +
 		"<ref name='nonNegativeDecimal' />" +
 	"</element>" +
-	"<element name='Rates' a:help='Rates at which to gather resources'>" +
-		Resources.BuildSchema('nonNegativeDecimal') +
-	"</element>" +
-"</element>" +
-"</optional>" +
-"<optional>" +
-	"<element name='Upgrade' a:help='Entity to upgrade to upon reaching max population.'>" +
-		"<text />" +
-	"</element>" +
-"</optional>";
-
+	"<optional>" +
+		"<element name='RangeOverlay'>" +
+			"<interleave>" +
+				"<element name='LineTexture'><text/></element>" +
+				"<element name='LineTextureMask'><text/></element>" +
+				"<element name='LineThickness'><ref name='nonNegativeDecimal'/></element>" +
+			"</interleave>" +
+		"</element>" +
+	"</optional>" +
+	"<optional>" +
+		"<element name='Upgrade' a:help='Entity to upgrade to upon reaching max population.'>" +
+			"<text />" +
+		"</element>" +
+	"</optional>" +
+	"<optional>" +
+		"<!-- Source: globalscripts/ModificationTemplates.js:ModificationSchema  -->" +
+		"<!-- Value modifiers for this entity, which scale with number of garrisoned units. Can affect either self or entities within city radius.  -->" +
+		"<element name='ValueModifiers' a:help='List of value modifiers for this entity, scaling by {PerPop} units population.'>" +
+			"<oneOrMore>" +
+				"<element>" +
+					"<anyName />" +
+					"<interleave>" +
+						"<element name='Paths' a:help='Space separated value paths to modify.'>" +
+							"<attribute name='datatype'>" +
+								"<value>tokens</value>" +
+							"</attribute>" +
+							"<text/>" +
+						"</element>" +
+						"<choice>" +
+							"<element name='Add'>" +
+								"<data type='decimal' />" +
+							"</element>" +
+							"<element name='Multiply'>" +
+								"<data type='decimal' />" +
+							"</element>" +
+						"</choice>" +
+						"<element name='PerPop' a:help='Modifier will scale per {PerPop} citizens living in city.'>" +
+							"<data type='positiveInteger'/>" +
+						"</element>" +
+						"<optional>" +
+							"<element name='MaxStackable' a:help='Maximum number of times to stack this value modifier; unlimited by default.'>" +
+								"<data type='positiveInteger'/>" +
+							"</element>" +
+						"</optional>" +
+					"</interleave>" +
+				"</element>" +
+			"</oneOrMore>" +
+		"</element>" +
+	"</optional>";
 
 City.prototype.Init = function()
 {
@@ -116,7 +104,8 @@ City.prototype.Init = function()
 	this.cityMembers = new Set();
 	// set timer this.growthTimer to grow population at interval
 	this.ResetGrowthTimer();
-	this.ResetResourceTrickleTimer();
+	// maps ModifierName => PopulationScalar
+	this.appliedValueModifiers = this.GetValueModifierPopScalars();
 	// count initial pop for statistics tracker
 	// only if initial city, not for city upgrades
 	if (!this.IsInitial())
@@ -143,17 +132,6 @@ City.prototype.ResetGrowthTimer = function()
 	this.growthTimer = cmpTimer.SetInterval(this.entity, IID_City, "GrowPopulation", growthTimerInterval, growthTimerInterval, null);
 };
 
-City.prototype.ResetResourceTrickleTimer = function()
-{
-	if (!this.template.ResourceTrickle)
-		return;
-	let cmpTimer = Engine.QueryInterface(SYSTEM_ENTITY, IID_Timer);
-	if (this.resourceTrickleTimer)
-		cmpTimer.CancelTimer(this.resourceTrickleTimer);
-	let timerInterval = ApplyValueModificationsToEntity("City/ResourceTrickle/Interval", Math.round(+this.template.ResourceTrickle.Interval), this.entity);
-	this.resourceTrickleTimer = cmpTimer.SetInterval(this.entity, IID_City, "TrickleResources", timerInterval, timerInterval, null);
-};
-
 City.prototype.IsInitial = function()
 {
 	return this.template.hasOwnProperty('Initial') && this.template.Initial;
@@ -313,37 +291,6 @@ City.prototype.GrowPopulation = function()
 	return this.SetPopulation(oldPopulation + this.GetPopulationGrowthAmount() - this.GetPopulationDecayAmount());
 };
 
-City.prototype.ComputeResourceTrickleRates = function()
-{
-	let popMultiplier = Math.floor(+this.GetPopulation() / 
-		ApplyValueModificationsToEntity("City/ResourceTrickle/PerPop", Math.round(+this.template.ResourceTrickle.PerPop), this.entity));
-	let rates = {};
-	for (let resource in this.template.ResourceTrickle.Rates)
-	{
-		rates[resource] = ApplyValueModificationsToEntity(
-			sprintf("City/ResourceTrickle/Rates/%s", resource),
-			Math.round(+this.template.ResourceTrickle.Rates[resource]), this.entity) * popMultiplier;
-	}// end for rate of rates
-	return rates;
-};
-
-City.prototype.TrickleResources = function()
-{
-	let cmpPlayer = QueryOwnerInterface(this.entity) || Engine.QueryInterface(this.entity, IID_Player);
-	if (!cmpPlayer)
-		return;
-
-	let rates = this.ComputeResourceTrickleRates();
-	cmpPlayer.AddResources(rates);
-
-	let cmpStatisticsTracker = QueryOwnerInterface(this.entity, IID_StatisticsTracker);
-	if (cmpStatisticsTracker) {
-		for (let res in rates) {
-			cmpStatisticsTracker.IncreaseResourceGatheredCounter(res, rates[res], null);
-		}// end for res
-	}
-};
-
 City.prototype.GetUpgradeTemplate = function()
 {
 	if (!this.template.Upgrade)
@@ -427,13 +374,115 @@ City.prototype.CancelGrowthTimer = function()
 	}
 };
 
-City.prototype.CancelResourceTrickleTimer = function()
+// Get value modifiers, scaled by number of garrisoned units with approriate classes.
+// @return		[Object{"PATH": [{("add"|"multiply"|"replace"): Number}]}]			Scaled value modifiers
+City.prototype.GetValueModifiers = function()
 {
-	if (this.resourceTrickleTimer)
+	if (!this.template.ValueModifiers)
+		return [];
+	let modifierTemplates = this.template.ValueModifiers;
+	let output = {};
+	for (let name in modifierTemplates)
 	{
-		let cmpTimer = Engine.QueryInterface(SYSTEM_ENTITY, IID_Timer);
-		cmpTimer.CancelTimer(this.resourceTrickleTimer);
-		this.resourceTrickleTimer = undefined;
+		let mod = modifierTemplates[name];
+		let scalar = Math.floor(this.GetPopulation() / ApplyValueModificationsToEntity("City/ValueModifiers/" + name + "/PerPop", +mod.PerPop, this.entity));
+		let [type, value] = (() => {
+			if (mod.Add)
+				return ["add", ApplyValueModificationsToEntity("City/ValueModifiers/" + name + "/Add", +mod.Add, this.entity) * scalar];
+			if (mod.Multiply)
+				return ["multiply", Math.pow(ApplyValueModificationsToEntity("City/ValueModifiers/" + name + "/Multiply", +mod.Multiply, this.entity), scalar)];
+		})();
+		let effect = {};
+		effect[type] = value;
+
+		let ret = {};
+		for (let path of mod.Paths._string.split(/\s+/g))
+		{
+			// cannot modify other City ValueModifiers; would cause an infinite loop
+			if (path.match(/^City\/ValueModifiers/))
+			{
+				error(sprintf('City ValueModifiers cannot modify other City ValueModifiers (got %s); ignoring %s', path, name));
+				ret = undefined;
+				continue;
+			}
+			ret[path] = [effect];
+		}
+
+		if (ret)
+			output[name] = [ret, scalar];
+	}
+	return output;
+};
+
+// returns population scalars for each value modifier
+// @return		Map{"ValueModifier": Number ...}
+City.prototype.GetValueModifierPopScalars = function()
+{
+	if (!this.template.ValueModifiers)
+		return [];
+	let modifierTemplates = this.template.ValueModifiers;
+	let output = new Map();
+	for (let name in modifierTemplates)
+	{
+		let mod = modifierTemplates[name];
+		let scalar = Math.floor(this.GetPopulation() / ApplyValueModificationsToEntity("City/ValueModifiers/" + name + "/PerPop", +mod.PerPop, this.entity));
+		output.set(name, scalar);
+	}
+	return output;
+};
+
+// applies value modifiers to entity
+// @param force		bool		if true, update value modifiers regardless of whether population scalars have changed
+// @return none
+City.prototype.ApplyValueModifiers = function()
+{
+	let valueModifierPopScalars = this.GetValueModifierPopScalars();
+	this.valueModifierPopScalars = valueModifierPopScalars;
+	let valueModifiers = this.GetValueModifiers();
+	let cmpModifiersManager = Engine.QueryInterface(SYSTEM_ENTITY, IID_ModifiersManager);
+	// first, remove any modifiers that are no longer needed
+	for (let key of this.appliedValueModifiers.keys())
+	{
+		let modName = sprintf("%d:City/ValueModifiers/%s", this.entity, key);
+		if (!valueModifiers.hasOwnProperty(modName))
+		{
+			cmpModifiersManager.RemoveAllModifiers(modName, this.entity);
+			this.appliedValueModifiers.delete(key);
+		}
+	}
+	// next, add or modify other modifiers. if modifier already applied in some form, make sure to remove before reapplying, as scalar may be off
+	for (let [key, [mod, scalar]] of Object.entries(valueModifiers))
+	{
+		let modName = sprintf("%d:City/ValueModifiers/%s", this.entity, key);
+		if (this.appliedValueModifiers.has(key))
+			cmpModifiersManager.RemoveAllModifiers(modName, this.entity);
+		else
+			this.appliedValueModifiers.set(key, scalar);
+		cmpModifiersManager.AddModifiers(modName, mod, this.entity);
+	}
+};
+
+City.prototype.OnCityPopulationChanged = function()
+{
+	// check if any ValueModifier scalars exist and have changed; if so, reapply value modifiers
+	if (!this.template.ValueModifiers)
+		return;
+	let valueModifierPopScalars = this.GetValueModifierPopScalars();
+	for (let [name, scalar] of valueModifierPopScalars.entries())
+	{
+		if (this.valueModifierPopScalars.get(name) !== scalar)
+		{
+			this.ApplyValueModifiers();
+			return;
+		}
+	}
+};
+
+City.prototype.OnValueModification = function(msg)
+{
+	if (msg.component === 'City' && msg.valueNames.some((valueName) => valueName.indexOf("City/ValueModifiers") !== -1))
+	{
+		this.ApplyValueModifiers();
 	}
 };
 
@@ -453,8 +502,16 @@ City.prototype.OnDestroy = function(msg)
 	let cmpRangeManager = Engine.QueryInterface(SYSTEM_ENTITY, IID_RangeManager);
 	if (this.cityMembersQuery)
 		cmpRangeManager.DestroyActiveQuery(this.cityMembersQuery);
+	let cmpModifiersManager = Engine.QueryInterface(SYSTEM_ENTITY, IID_ModifiersManager);
+	for (let key of this.appliedValueModifiers.keys())
+	{
+		let modName = sprintf("%d/GarrisonHolder/ValueModifiers/%s", this.entity, key);
+		cmpModifiersManager.RemoveAllModifiers(modName, this.entity);
+	}
+	let cityMemberModName = sprintf('%d:CityMemberGrowthModifiers', this.entity);
+	if (cmpModifiersManager.HasAnyModifier(cityMemberModName, this.entity))
+		cmpModifiersManager.RemoveAllModifiers(cityMemberModName, this.entity);
 	this.CancelGrowthTimer();
-	this.CancelResourceTrickleTimer();
 	let cmpStatisticsTracker = QueryOwnerInterface(this.entity, IID_StatisticsTracker);
 	if (cmpStatisticsTracker)
 		cmpStatisticsTracker.IncreaseCivicPopulation(-this.population);
diff --git a/binaries/data/mods/public/simulation/components/GarrisonHolder.js b/binaries/data/mods/public/simulation/components/GarrisonHolder.js
index 6e1aaedf2f..15b3b57fec 100644
--- a/binaries/data/mods/public/simulation/components/GarrisonHolder.js
+++ b/binaries/data/mods/public/simulation/components/GarrisonHolder.js
@@ -381,10 +381,18 @@ GarrisonHolder.prototype.GetValueModifiers = function()
 		let ret = {};
 		for (let path of mod.Paths._string.split(/\s+/g))
 		{
+			// prevents infinite loops
+			if (path.match(/^GarrisonHolder\/ValueModifiers/))
+			{
+				error(sprintf('GarrisonHolder ValueModifiers cannot modify other GarrisonHolder ValueModifiers (got %s); ignoring %s', path, name));
+				ret = undefined;
+				continue;
+			}
 			ret[path] = [effect];
 		}
 
-		output[name] = ret;
+		if (ret)
+			output[name] = ret;
 	}
 	return output;
 };
@@ -399,7 +407,7 @@ GarrisonHolder.prototype.ApplyValueModifiers = function()
 	// first, remove any modifiers that are no longer needed
 	for (let key of this.appliedValueModifiers.keys())
 	{
-		let modName = sprintf("%d/GarrisonHolder/ValueModifiers/%s", this.entity, key);
+		let modName = sprintf("%d:GarrisonHolder/ValueModifiers/%s", this.entity, key);
 		if (!valueModifiers.hasOwnProperty(modName))
 		{
 			cmpModifiersManager.RemoveAllModifiers(modName, this.entity);
@@ -409,7 +417,7 @@ GarrisonHolder.prototype.ApplyValueModifiers = function()
 	// next, add or modify other modifiers. if modifier already applied in some form, make sure to remove before reapplying, as scalar may be off
 	for (let [key, mod] of Object.entries(valueModifiers))
 	{
-		let modName = sprintf("%d/GarrisonHolder/ValueModifiers/%s", this.entity, key);
+		let modName = sprintf("%d:GarrisonHolder/ValueModifiers/%s", this.entity, key);
 		if (this.appliedValueModifiers.has(key))
 			cmpModifiersManager.RemoveAllModifiers(modName, this.entity);
 		else
@@ -500,7 +508,7 @@ GarrisonHolder.prototype.OnDestroy = function()
 	let cmpModifiersManager = Engine.QueryInterface(SYSTEM_ENTITY, IID_ModifiersManager);
 	for (let key of this.appliedValueModifiers.keys())
 	{
-		let modName = sprintf("%d/GarrisonHolder/ValueModifiers/%s", this.entity, key);
+		let modName = sprintf("%d:GarrisonHolder/ValueModifiers/%s", this.entity, key);
 		cmpModifiersManager.RemoveAllModifiers(modName, this.entity);
 	}
 };
diff --git a/binaries/data/mods/public/simulation/components/GuiInterface.js b/binaries/data/mods/public/simulation/components/GuiInterface.js
index 897ae13bbe..9fc70b5e5f 100644
--- a/binaries/data/mods/public/simulation/components/GuiInterface.js
+++ b/binaries/data/mods/public/simulation/components/GuiInterface.js
@@ -292,10 +292,14 @@ GuiInterface.prototype.GetEntityState = function(player, ent)
 			"population": cmpCity.GetPopulation(),
 			"growth": {
 				"amount": cmpCity.GetPopulationGrowthAmount(),
-				"interval": cmpCity.GetPopulationGrowthInterval()
+				"decayAmount": cmpCity.GetPopulationDecayAmount(),
+				"interval": cmpCity.GetPopulationGrowthInterval(),
+				"tradeRate": cmpCity.GetTradeGrowthRate()
 			},
-			"max": cmpCity.GetMaxPopulation(),
-			"upgrade": cmpCity.GetUpgradeTemplate()
+			"maxPopulation": cmpCity.GetMaxPopulation(),
+			"minPopulation": cmpCity.GetMinPopulation(),
+			"upgrade": cmpCity.GetUpgradeTemplate(),
+			"downgrade": cmpCity.GetDowngradeTemplate()
 		};
 
 	let cmpPosition = Engine.QueryInterface(ent, IID_Position);
diff --git a/binaries/data/mods/public/simulation/components/schemas/City.xsd b/binaries/data/mods/public/simulation/components/schemas/City.xsd
index ae8a9d7c7e..fd2750cc0b 100644
--- a/binaries/data/mods/public/simulation/components/schemas/City.xsd
+++ b/binaries/data/mods/public/simulation/components/schemas/City.xsd
@@ -5,44 +5,9 @@
 	</element>
 </optional>
 <optional>
-<element name='Influence' a:help='Modifications to surrounding structures'>
-	<zeroOrMore>
-		<element a:help='One modification'>
-			<anyName />
-			<element name='Attribute' a:help='Attribute to modify'>
-				<text />
-			</element>
-			<element name='List' a:help='Classes to modify'>
-				<attribute name='datatype'>
-					<value>tokens</value>
-				</attribute>
-				<text />
-			</element>
-			<element name='Modifier' a:help='Modification to make'>
-				<element name='Base' a:help='Basic value of modification'>
-					<ref name='decimal' />
-				</element>
-				<element name='PerPop' a:help='Apply bonus per X amount population'>
-					<ref name='nonNegativeDecimal' />
-				</element>
-				<element name='Type' a:help='Add or Multiply'>
-					<choice>
-						<value>add</value>
-						<value>multiply</value>
-					</choice>
-				</element>
-				<element name='Value' a:help='Population bonus value'>
-					<ref name='decimal' />
-				</element>
-			</element>
-		</element>
-	</zeroOrMore>
-</element>
-</optional>
-<optional>
-<element name='Initial' a:help='Whether or not this is the initial buildable city in a progression of city types.'>
-	<data type='boolean' />
-</element>
+	<element name='Initial' a:help='Whether or not this is the initial buildable city in a progression of city types.'>
+		<data type='boolean' />
+	</element>
 </optional>
 <element name='Population' a:help='Population of city (does not relate to player population number)'>
 	<element name='Growth' a:help='Population growth rate'>
@@ -51,6 +16,7 @@
 		</element>
 		<optional>
 			<element name='AttackMultiplier' a:help='Modify growth rate when city attacked'>
+				<!-- TODO: implement -->
 				<ref name='decimal' />
 			</element>
 		</optional>
@@ -78,29 +44,51 @@
 	<ref name='nonNegativeDecimal' />
 </element>
 <optional>
-<element name='RangeOverlay'>
-	<interleave>
-		<element name='LineTexture'><text/></element>
-		<element name='LineTextureMask'><text/></element>
-		<element name='LineThickness'><ref name='nonNegativeDecimal'/></element>
-	</interleave>
-</element>
-</optional>
-<optional>
-<element name='ResourceTrickle' a:help='Resource trickle, modified by population'>
-	<element name='Interval' a:help='Interval to collect resources in milliseconds'>
-		<ref name='nonNegativeDecimal' />
-	</element>
-	<element name='PerPop' a:help='Multiply rates per X number of people'>
-		<ref name='nonNegativeDecimal' />
+	<element name='RangeOverlay'>
+		<interleave>
+			<element name='LineTexture'><text/></element>
+			<element name='LineTextureMask'><text/></element>
+			<element name='LineThickness'><ref name='nonNegativeDecimal'/></element>
+		</interleave>
 	</element>
-	<element name='Rates' a:help='Rates at which to gather resources'>
-		{{ Resources.BuildSchema('nonNegativeDecimal') }}
-	</element>
-</element>
 </optional>
 <optional>
 	<element name='Upgrade' a:help='Entity to upgrade to upon reaching max population.'>
 		<text />
 	</element>
 </optional>
+<optional>
+	<!-- Source: globalscripts/ModificationTemplates.js:ModificationSchema  -->
+	<!-- Value modifiers for this entity, which scale with number of garrisoned units. Can affect either self or entities within city radius.  -->
+	<element name='ValueModifiers' a:help='List of value modifiers for this entity, scaling by {PerPop} units population.'>
+		<oneOrMore>
+			<element>
+				<anyName />
+				<interleave>
+					<element name='Paths' a:help='Space separated value paths to modify.'>
+						<attribute name='datatype'>
+							<value>tokens</value>
+						</attribute>
+						<text/>
+					</element>
+					<choice>
+						<element name='Add'>
+							<data type='decimal' />
+						</element>
+						<element name='Multiply'>
+							<data type='decimal' />
+						</element>
+					</choice>
+					<element name='PerPop' a:help='Modifier will scale per {PerPop} citizens living in city.'>
+						<data type='positiveInteger'/>
+					</element>
+					<optional>
+						<element name='MaxStackable' a:help='Maximum number of times to stack this value modifier; unlimited by default.'>
+							<data type='positiveInteger'/>
+						</element>
+					</optional>
+				</interleave>
+			</element>
+		</oneOrMore>
+	</element>
+</optional>
-- 
2.25.1

